{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCart = {\n  items: [],\n  totalQuantity: 0\n};\nconst itemsSlice = createSlice({\n  name: \"items\",\n  initialState: initialCart,\n  reducers: {\n    addItem(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id); //check if already in items array\n\n      console.log(state.items.find(item => item.id === newItem.id));\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          title: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItem(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      console.log(existingItem.quantity);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(items => items.id !== id); //filter by all item.id !== id and set a new state.items object\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const itemsActions = itemsSlice.actions;\nexport default itemsSlice;","map":{"version":3,"sources":["C:/Users/taylo/Desktop/TaylorCoding/React Course/CartRedux/src/store/items-slice.js"],"names":["createSlice","initialCart","items","totalQuantity","itemsSlice","name","initialState","reducers","addItem","state","action","newItem","payload","existingItem","find","item","id","console","log","push","title","price","quantity","totalPrice","removeItem","filter","itemsActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,WAAW,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,aAAa,EAAE;AAA5B,CAApB;AAEA,MAAMC,UAAU,GAAGJ,WAAW,CAAC;AAC7BK,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAEL,WAFe;AAG7BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrB,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACP,KAAN,CAAYY,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAArB,CAFqB,CAEoD;;AACzEC,MAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACP,KAAN,CAAYY,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAAZ;AACAP,MAAAA,KAAK,CAACN,aAAN;;AACA,UAAI,CAACU,YAAL,EAAmB;AACjBJ,QAAAA,KAAK,CAACP,KAAN,CAAYiB,IAAZ,CAAiB;AACfH,UAAAA,EAAE,EAAEL,OAAO,CAACK,EADG;AAEfI,UAAAA,KAAK,EAAET,OAAO,CAACS,KAFA;AAGfC,UAAAA,KAAK,EAAEV,OAAO,CAACU,KAHA;AAIfC,UAAAA,QAAQ,EAAE,CAJK;AAKfC,UAAAA,UAAU,EAAEZ,OAAO,CAACU;AALL,SAAjB;AAOD,OARD,MAQO;AACLR,QAAAA,YAAY,CAACS,QAAb;AACAT,QAAAA,YAAY,CAACU,UAAb,GAA0BV,YAAY,CAACU,UAAb,GAA0BZ,OAAO,CAACU,KAA5D;AACD;AACF,KAlBO;;AAmBRG,IAAAA,UAAU,CAACf,KAAD,EAAQC,MAAR,EAAgB;AACxB,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACP,KAAN,CAAYY,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,YAAY,CAACS,QAAzB;AACAb,MAAAA,KAAK,CAACN,aAAN;;AAEA,UAAIU,YAAY,CAACS,QAAb,KAA0B,CAA9B,EAAiC;AAC/Bb,QAAAA,KAAK,CAACP,KAAN,GAAcO,KAAK,CAACP,KAAN,CAAYuB,MAAZ,CAAoBvB,KAAD,IAAWA,KAAK,CAACc,EAAN,KAAaA,EAA3C,CAAd,CAD+B,CAC+B;AAC/D,OAFD,MAEO;AACLH,QAAAA,YAAY,CAACS,QAAb;AACAT,QAAAA,YAAY,CAACU,UAAb,GAA0BV,YAAY,CAACU,UAAb,GAA0BV,YAAY,CAACQ,KAAjE;AACD;AACF;;AA/BO;AAHmB,CAAD,CAA9B;AAsCA,OAAO,MAAMK,YAAY,GAAGtB,UAAU,CAACuB,OAAhC;AAEP,eAAevB,UAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCart = { items: [], totalQuantity: 0 };\r\n\r\nconst itemsSlice = createSlice({\r\n  name: \"items\",\r\n  initialState: initialCart,\r\n  reducers: {\r\n    addItem(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id); //check if already in items array\r\n      console.log(state.items.find((item) => item.id === newItem.id));\r\n      state.totalQuantity++;\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          title: newItem.title,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n        });\r\n      } else {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      }\r\n    },\r\n    removeItem(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n      console.log(existingItem.quantity);\r\n      state.totalQuantity--;\r\n\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((items) => items.id !== id); //filter by all item.id !== id and set a new state.items object\r\n      } else {\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const itemsActions = itemsSlice.actions;\r\n\r\nexport default itemsSlice;\r\n"]},"metadata":{},"sourceType":"module"}