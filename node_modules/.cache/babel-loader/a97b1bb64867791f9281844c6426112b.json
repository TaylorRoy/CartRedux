{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCart = {\n  items: [],\n  totalQuantity: 0,\n  changed: false\n};\nconst itemsSlice = createSlice({\n  name: \"items\",\n  initialState: initialCart,\n  reducers: {\n    replaceCart(state, action) {\n      console.log(\"replaceCart\", action.payload);\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n\n    addItem(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id); //check if already in items array\n\n      console.log(state.items);\n      state.totalQuantity++;\n      state.changed = true;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          title: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItem(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      console.log(existingItem.quantity);\n      state.totalQuantity--;\n      state.changed = true;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id); //filter by all item.id !== id and set a new state.items object\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const itemsActions = itemsSlice.actions;\nexport default itemsSlice;","map":{"version":3,"sources":["C:/Users/taylo/Desktop/TaylorCoding/React Course/CartRedux/src/store/items-slice.js"],"names":["createSlice","initialCart","items","totalQuantity","changed","itemsSlice","name","initialState","reducers","replaceCart","state","action","console","log","payload","addItem","newItem","existingItem","find","item","id","push","title","price","quantity","totalPrice","removeItem","filter","itemsActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,WAAW,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,aAAa,EAAE,CAA5B;AAA+BC,EAAAA,OAAO,EAAE;AAAxC,CAApB;AAEA,MAAMC,UAAU,GAAGL,WAAW,CAAC;AAC7BM,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAEN,WAFe;AAG7BO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,MAAM,CAACG,OAAlC;AACAJ,MAAAA,KAAK,CAACP,aAAN,GAAsBQ,MAAM,CAACG,OAAP,CAAeX,aAArC;AACAO,MAAAA,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACG,OAAP,CAAeZ,KAA7B;AACD,KALO;;AAMRa,IAAAA,OAAO,CAACL,KAAD,EAAQC,MAAR,EAAgB;AACrB,YAAMK,OAAO,GAAGL,MAAM,CAACG,OAAvB;AACA,YAAMG,YAAY,GAAGP,KAAK,CAACR,KAAN,CAAYgB,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAA/C,CAArB,CAFqB,CAEoD;;AACzER,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACR,KAAlB;AACAQ,MAAAA,KAAK,CAACP,aAAN;AACAO,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;;AACA,UAAI,CAACa,YAAL,EAAmB;AACjBP,QAAAA,KAAK,CAACR,KAAN,CAAYmB,IAAZ,CAAiB;AACfD,UAAAA,EAAE,EAAEJ,OAAO,CAACI,EADG;AAEfE,UAAAA,KAAK,EAAEN,OAAO,CAACM,KAFA;AAGfC,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAHA;AAIfC,UAAAA,QAAQ,EAAE,CAJK;AAKfC,UAAAA,UAAU,EAAET,OAAO,CAACO;AALL,SAAjB;AAOD,OARD,MAQO;AACLN,QAAAA,YAAY,CAACO,QAAb;AACAP,QAAAA,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACQ,UAAb,GAA0BT,OAAO,CAACO,KAA5D;AACD;AACF,KAxBO;;AAyBRG,IAAAA,UAAU,CAAChB,KAAD,EAAQC,MAAR,EAAgB;AACxB,YAAMS,EAAE,GAAGT,MAAM,CAACG,OAAlB;AACA,YAAMG,YAAY,GAAGP,KAAK,CAACR,KAAN,CAAYgB,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYI,YAAY,CAACO,QAAzB;AACAd,MAAAA,KAAK,CAACP,aAAN;AACAO,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;;AACA,UAAIa,YAAY,CAACO,QAAb,KAA0B,CAA9B,EAAiC;AAC/Bd,QAAAA,KAAK,CAACR,KAAN,GAAcQ,KAAK,CAACR,KAAN,CAAYyB,MAAZ,CAAoBR,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAzC,CAAd,CAD+B,CAC6B;AAC7D,OAFD,MAEO;AACLH,QAAAA,YAAY,CAACO,QAAb;AACAP,QAAAA,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACM,KAAjE;AACD;AACF;;AArCO;AAHmB,CAAD,CAA9B;AA4CA,OAAO,MAAMK,YAAY,GAAGvB,UAAU,CAACwB,OAAhC;AAEP,eAAexB,UAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCart = { items: [], totalQuantity: 0, changed: false };\r\n\r\nconst itemsSlice = createSlice({\r\n  name: \"items\",\r\n  initialState: initialCart,\r\n  reducers: {\r\n    replaceCart(state, action) {\r\n      console.log(\"replaceCart\", action.payload);\r\n      state.totalQuantity = action.payload.totalQuantity;\r\n      state.items = action.payload.items;\r\n    },\r\n    addItem(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id); //check if already in items array\r\n      console.log(state.items);\r\n      state.totalQuantity++;\r\n      state.changed = true;\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          title: newItem.title,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n        });\r\n      } else {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      }\r\n    },\r\n    removeItem(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n      console.log(existingItem.quantity);\r\n      state.totalQuantity--;\r\n      state.changed = true;\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== id); //filter by all item.id !== id and set a new state.items object\r\n      } else {\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const itemsActions = itemsSlice.actions;\r\n\r\nexport default itemsSlice;\r\n"]},"metadata":{},"sourceType":"module"}